%{
#define YYSTYPE void*
#define YYPARSE yybodyparse

#define YY_CTX_LOCAL

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <wchar.h>

#include <gc.h>

extern FILE* yyout;
wchar_t* yybodyeval(wchar_t*);

#include "ekipp.h"
%}


Body   = ( Text | Call | Argnum )* "\n\n";

Text   = < ( !(Call Argnum) . )* > { fputs(&yytext[0], yyout);    }
       ;

Call   = '$' i:IDENT		{ fputws(get_symbol((char*)i), 
						yyout);		  }
       ;

Argnum = '#' n:NUM		{ invoke_printarg((long)n);       }
       | '#' q:QUO		{ invoke_printargs((wchar_t*)q);  }
       ;




IDENT   = [a-zA-Z_][a-zA-Z_0-9]* { $$ = gc_strdup(&yytext[0]);   }
NUM   = < [0-9]+ >		 { $$ = (void*)atol(&yytext[0]); }
QUO   = '`' < ( !'`' .)+ > '`'   { $$ = gc_strdup(&yytext[0]);   }
%%

#define RET_MAX		65536

wchar_t* yybodyeval(wchar_t* code) {
	FILE* inhold    = stdin;
	FILE* outhold   = stdout;

	wchar_t* ret 	= GC_MALLOC(RET_MAX * sizeof(wchar_t));

	stdin 		= fmemopen(code, wcslen(code), "r");
	stdout  	= fmemopen(ret, RET_MAX * sizeof(wchar_t), "w");

	yycontext ctx;
	memset(&ctx, 0, sizeof(ctx));

	while (yybodyparse(&ctx));
	
	fclose(stdin);
	fclose(stdout);

	stdin 		= inhold;
	stdout		= outhold;

	return ret;
}
