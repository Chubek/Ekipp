%{
#define YYSTYPE wchar_t*
#define YYPARSE	yydefparse

#define YY_CTX_LOCAL

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <wchar.h>

#include <gc.h>

extern wchar_t* yybuiltineval(wchar_t*);
extern wchar_t* yybodyeval(wchar_t*);
extern FILE*	yyin;
extern FILE*  	yyout;

wchar_t* yydefeval(wchar_t*);

#define yyrelease 	yyrls
#define yyparsefrom	yypfm

#include "ekipp.h"
%}

DefMain  = ( Call
		| pop
		| undef
		| Pusheval
		| Push
		| Defeval
		| Define )* "\x00";

Call	 = '$' i:IDENT ('(' Args ')')?  { invoke_macro(i);	      }
         ;

Args     = (a:ARG ','?)+	        { invoke_addarg(a);	      }
         ;

pop      = "@!" - "pop"			{ pop_stack();		      }
         ;


undef	 = "@!" - "undef" - '$'	- i:IDENT - { remove_symbol(i);	      }

Pusheval = "@!" - "pusheval" - '$'- i:IDENT - d:DEFN - { 
				push_stack(i, yybuiltineval(d));     }	 
	 ;

Push    = "@!" - "push" - '$' - i:IDENT - d:DEFN - { 
					push_stack(i, d);   }
	;

Defeval = "@!" - "defeval" - '$' - i:IDENT - d:DEFN - { 
				insert_symbol(i, yybuiltineval(d));  }
	;

Define  = "@!" - "define" - '$' - i:IDENT - d:DEFN - { 
					 insert_symbol(i, d);        }
	;

ARG     =  < ( !',' .)+ > 		{ $$ = gc_mbsdup(&yytext[0]); }
        ;
DEFN    = < ( !(EOL EOL) .)* >		{ $$ = gc_mbsdup(&yytext[0]);  }
	;
-	= (SPACE | COMMENT)*;
SPACE   = ' ' | '\t' | EOL;
COMMENT = "#" ( !EOL . ) EOL;
IDENT   = [a-zA-Z_][a-zA-Z_0-9]*	{ $$ = gc_mbsdup(&yytext[0]); }
	;
EOL     = [\r\n]+;

%%

#define RET_MAX		65536

wchar_t* yydefeval(wchar_t* code) {
	FILE* inhold 	= stdin;
	FILE* outhold   = stdout;

	wchar_t* ret	= GC_MALLOC(RET_MAX * sizeof(wchar_t));

	stdin		= fmemopen(code, wcslen(code), "r");
	stdout		= fmemopen(ret, RET_MAX * sizeof(wchar_t), "w");

	yycontext ctx;
        memset(&ctx, 0, sizeof(ctx));

	while (yydefparse(&ctx));

	fclose(stdin);
	fclose(stdout);

	stdin		= inhold;
	stdout		= outhold;

	return ret;
}

