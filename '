%{
#include <stdio.h>
#include <wchar.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <limits.h>

#include <gc.h>

#define MAX_INPUT 	128

int 		yylex(void);
int		yywrap(void);
void		yyerror(char* err);
FILE*		yyin;

extern char*	input_files[MAX_INPUT];
static int	input_idx = 0;

extern FILE*	output;
extern wchar_t* gc_wcsdup(wchar_t*);
extern char*	gc_strdup(char*);

#include "ekipp.h"
#include "yy.tab.h"
%}

Zero		[0]
Decimal		[+-]?[1-9][0-9]*
Hexal		[0xX][a-fA-F0-9]+
Octal		[0oO][0-7]+
Binary		[0bB][0-1]+
Ident		[a-zA-Z\_][a-zA-Z\_0-9]*

%x ESC
%x ENG
%x REG

%%
	#include "yylex.i"

{Zero}		{ yylval.ival = 0; 
				return NUM;    }
{Decimal}	{ yylval.ival = strtoll(yytext, NULL, 10); 
				return NUM;    }
{Hexal}		{ yylval.ival = strtoll(&yytext[2], NULL, 16); 
				return NUM;    }
{Octal}		{ yylval.ival = strtoll(&yytext[2], NULL, 8); 
				return NUM;    }
{Binary}	{ yylval.ival = strtoll(&yytext[2], NULL, 2); 
				return NUM;    }
[0-9]		{ yylval.ival = atoi(&yytext[0]); 
				return DIVNUM; }
[0-9]+		{ yylval.ival = atoi(&yytext[0]); 
				return ARGNUM; }

{Ident}		{ yylval.wval = gc_wcsdup((wchar_t*)&yytext[0]);
				return IDENT;    }

engage		return ENGAGE;
dnl		return DNL;
delim		return DELIM;
comment		return COMMENT;
quote		return QUOTE;

lsdir		return LSDIR;
translit	return TRANSLIT;
catfile		return CATFILE;
offset		return OFFSET;
datetime	return DATETIME;

divert		return DIVERT;
undivert	return UNDIVERT;

exec		return EXEC;
eval		return EVAL;

push		return PUSH;
pop		return POP;

define		return DEFINE;
undef		return UNDEF;

reflect		return REFLECT;
current		return CURRENT;

exit		return EXIT;
error		return ERROR;
print		return PRINT;
printf		return PRINTF;
mode		return MODE;
argv		return ARGV;

include		return INCLUDE;

>=		return GE;
\<=		return LE;
==		return EQ;
!=		return NE;
>>		return SHR;
\<<		return SHL;
\*\*		return POW;
\+\+		return INCR;
\-\-		return DECR;

[\r\n]+		ECHO;

[/]		{ BEGIN REG; }

\\ 		{ BEGIN ESC; }


<REG> [^\/]+	{ yylval.sval = &yytext[0]; return REGEX; }
<REG> [\/]	    { BEGIN INITIAL; }
<ESC> .+	    return ESC_TEXT;
<ESC> [\n\r]{2}	    { BEGIN INITIAL; }
<ENG> [$<>?:lr()]   return *yytext;
<ENG> [\n\r]{2}	    { ECHO; BEGIN INITIAL; }
[ \t]+		    ECHO;

[^a-zA-Z]{1,8}   return VTOK;

[0-9a-zA-Z_/-]{1,255}	{ yylval.sval = gc_strdup(&yytext[0]);
				return FILEPATH; }

[^,]{1,2048}	  return ARGUMENT;

<<EOF>>		yyterminate();

%%

void yyerror(char* err) {
	fputs(err, stderr);
}

int yywrap(void) {
	if (input_idx == MAX_INPUT - 1 || !input_files[input_idx])
		return 1;
	else {
		if (yyin) 
			fclose(yyin);
		yyin = fopen(input_files[input_idx++]);
		return 0;
	}
}
