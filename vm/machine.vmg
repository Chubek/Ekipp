\E stack data-stack sp Cell

\E inst-stream stack-prefix #

\E s" long"   single data-stack type-prefix i
\E s" char *" single data-stack type-prefix a
\E s" long double" single data-stack type-prefix f
\E s" void*" single data-stack type-prefix ptr
\E s" unsigned char *" single data-stack type-prefix str
\E s" Inst *" single data-stack type-prefix target
\E s" FILE *" single data-stack type-prefix file

add ( i1 i2 -- i )
i = i1+i2;

sub ( i1 i2 -- i )
i = i1-i2;

mul ( i1 i2 -- i )
i = i1*i2;

idiv ( i1 i2 -- i )
i = i1/i2;

rem ( i1 i2 -- i )
i = i1%i2;

pow ( i1 i2 -- i )
i = powl((long double)i1, (long double)i2);

fadd ( i1 f2 -- f )
f = f1+f2;

fsub ( f1 f2 -- f )
f = f1-f2;

fmul ( f1 f2 -- f )
f = f1*f2;

fdiv ( f1 f2 -- f )
f = f1/f2;

fpow ( f1 f2 -- f )
f = powl(f1, f2);

shr ( i1 i2 -- i )
i = i1 >> i2;

shl ( i1 i2 -- i )
i = i1 << i2;

and ( i1 i2 -- i )
i = i1 & i2;

or ( i1 i2 -- i )
i = i1 | i2;

xor ( i1 i2 -- i )
i = i1 ^ i2;

land ( i1 i2 -- i )
i = i1 && i2;

lor ( i1 i2 -- i )
i = i1 || i2;

lt ( i1 i2 -- i )
i = i1<i2;

le ( i1 i2 -- i )
i = i1<=i2;

gt ( i1 i2 -- i )
i = i1>i2;

ge ( i1 i2 -- i )
i = i1>=i2;

eq ( i1 i2 -- i )
i = i1==i2;

ne ( i1 i2 -- i )
i = i1 != i2;

not ( i1 -- i2 )
i2 = !i1;

neg ( i1 -- i2 )
i2 = -i1;

litnum ( #i -- i )
litptr ( #ptr -- ptr )
litflt ( #f -- f )
litstr ( #str -- str )
litfile ( #file -- file )

drop ( i -- )

print ( i -- )
printf("%ld\n", i);


input ( #ifd -- str )
FILE* inpfile;
switch (ifd) {
	case 0:
		inpfile = stdin;
		break;
	case 1:
		inpfile = stdout;
		break;
	case 2:
		inpfile = stderr;
		break;
	case 3:
		inpfile = yyout;
		break;
	default:
		break;
}
fseek(inpfile, 0, SEEK_END);
long len = ftell(inpfile);
rewind(inpfile);
str = GC_MALLOC(len);
fread(str, len, 1, inpfile);

output ( #ifd str -- )
FILE* outfile;
switch (ifd) {
	case 0:
		outfile = stdin;
		break;
	case 1:
		outfile = stdout;
		break;
	case 2:
		outfile = stderr;
		break;
	case 3:
		inpfile = yyout;
		break;
	default:
		break;
}
fwrite(str, u8_strlen(str), 1, outfile);

input_handle ( file -- str )
fseek(file, 0, SEEK_END);
long len = ftell(file);
rewind(file);
str = GC_MALLOC(len);
fread(str, len, 1, file);

output_handle ( file str -- )
fwrite(str, u8_strlen(str), 1, file);

strcat ( str1 str2 -- str )
size_t l1 = u8_strlen(str1);
size_t l2 = u8_strlen(str2);
str = GC_MALLOC(l1 + l2 + 1);
u8_strncat(&str[0], &str1[0], l1);
u8_strncat(&str[l1 - 1], &str2[0], l2);

libopen ( apath -- ptrhandle )
ptrhandle = dlopen(apath, RTLD_GLOBAL);

libsym ( ptrhandle aname -- ptrres )
ptrres = dlsym(ptrhandle, aname);

libclose ( ptrhandle -- )
dlclose(ptrhndle);

branch ( #target -- )
SET_IP(target);

zbranch ( #target i -- )
if (i==0) {
  SET_IP(target);
  INST_TAIL;
}

call ( #target #iadjust -- targetret aoldfp )
targetret = IP;
SET_IP(target);
aoldfp = fp;
sp = (Cell *)(((char *)sp)+iadjust);
fp = (char *)sp;

return ( #iadjust target afp ptr1 -- ptr2 )
SET_IP(target);
sp = (Cell *)(((char *)sp)+iadjust);
fp = afp;
ptr2=ptr1;

loadlocalstr ( #ioffset -- str )
vm_Cell2str(*(Cell *)(fp+ioffset),str);

storelocalstr ( #ioffset str -- )
vm_str2Cell(str,*(Cell *)(fp+ioffset));

loadlocalptr ( #ioffset -- str )
vm_Cell2ptr(*(Cell *)(fp+ioffset),ptr);

storelocalptr ( #ioffset str -- )
vm_ptr2Cell(ptr,*(Cell *)(fp+ioffset));

loadlocalnum ( #ioffset -- i )
vm_Cell2i(*(Cell *)(fp+ioffset),i);

storelocalnum ( #ioffset i -- )
vm_i2Cell(i,*(Cell *)(fp+ioffset));

loadlocalflt ( #ioffset -- f )
vm_Cell2f(*(Cell *)(fp+ioffset),f);

storelocalflt ( #ioffset f -- )
vm_f2Cell(f,*(Cell *)(fp+ioffset));

loadlocalfile ( #ioffset -- file )
vm_Cell2file(*(Cell *)(fp+ioffset),file);

storelocalfile ( #ioffset file -- )
vm_file2Cell(file,*(Cell *)(fp+ioffset));

end ( ptr -- )
#ifdef VM_PROFILING
block_insert(IP);
#endif
return ptr;

ll = loadlocal lit

